@page "/web2"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using Newtonsoft.Json
@inject IHttpContextAccessor _httpContextAccessor;


<PageTitle>Home</PageTitle>

@if (user.Identity.IsAuthenticated)
{
    <h1> AUTHENTICATED</h1>

    <h2> NAME: @user.Identity.Name</h2>
    <h2> IsAuthenticated: @user.Identity.IsAuthenticated</h2>
    <h2> AuthenticationType: @user.Identity.AuthenticationType</h2>
}
else
{

    <h1>NOT AUTHENTICATED</h1>

    <EditForm method="post" FormName="Login" Model="@this" OnValidSubmit="LoginClick">
        <div>
            <label class="mb-2" style="color:gray">Username</label>
            <div class="form-group mb-3">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-person-fill"></i>
                    </span>
                    <InputText @bind-Value="username" class="form-control" type="text" placeholder="Username" />
                </div>
            </div>
            <ValidationMessage style="color:Red" For="@(() => username)"></ValidationMessage>
            <label class="mb-2" for="email" style="color: gray">Password</label>
            <div class="form-group mb-3">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-lock-fill"></i>
                    </span>
                    <InputText @bind-Value="password" class="form-control" type="password" placeholder="Password" />
                </div>
            </div>
            <ValidationMessage style="color:Red" For="@(() => password)"></ValidationMessage>

            <div class="alert alert-light mt-3 mb-3 text-center" role="alert">
                Enter your Username & Password to Login
            </div>


            <hr class="hr hr-blurry mt-3 mb-3" />

            <div class="col-lg-12 mt-5 mb-4">
                <button class="btn btn-primary" style="width: 100%" type="submit" onclick="SubmitLogin()" id="LoginButtonClick">
                    <script>
                        function SubmitLogin() {
                            const loading = document.getElementById('LoadingSubmit');
                            const btn = document.getElementById('LoginButtonClick');
                            btn.style.display = "none";
                            loading.style.display = "block";
                        }
                    </script>
                    <i class="bi bi-login"></i> <span id="LoginButtonLabel"> Login </span>
                </button>

                <div class="btn btn-outline-primary" style="width: 100%; display: none;" disabled id="LoadingSubmit">
                    <div class="spinner-border spinner-border-sm" role="status">
                    </div>
                </div>

            </div>
        </div>
    </EditForm>
}
@code {
    [SupplyParameterFromForm(FormName = "Login")]
    private string username { get; set; }
    private string password { get; set; }
    private int role { get; set; } = 1;

    private Task<AuthenticationState>? authenticationState { get; set; }

    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        if (_httpContextAccessor.HttpContext is not null)
        {
            var result = await _httpContextAccessor.HttpContext.AuthenticateAsync();

            var authenticationStateProvider = _httpContextAccessor.HttpContext.RequestServices
                .GetRequiredService<AuthenticationStateProvider>();

            authenticationState = authenticationStateProvider.GetAuthenticationStateAsync();

            if (authenticationState is not null)
            {
                var authState = await authenticationState;
                user = authState?.User;
            }


        }
    }

    private async Task LoginClick()
    {
        try
        {
            Guid guid = Guid.NewGuid();

            var claims = new List<Claim>
                {
                new(ClaimTypes.PrimarySid, guid.ToString()),
                new(ClaimTypes.Name, username),

                };

            if (Convert.ToBoolean(role == 1) == true)
                claims.Add(new Claim(ClaimTypes.Role, "SA"));

            if (Convert.ToBoolean(role == 2) == true)
                claims.Add(new Claim(ClaimTypes.Role, "TOD"));

            if (Convert.ToBoolean(role == 3) == true)
                claims.Add(new Claim(ClaimTypes.Role, "MCD"));

            ClaimsPrincipal principal = new(new ClaimsIdentity(claims,
            CookieAuthenticationDefaults.AuthenticationScheme));

            var authProperties = new AuthenticationProperties
            {

            };

            await _httpContextAccessor.HttpContext.SignInAsync(
            CookieAuthenticationDefaults.AuthenticationScheme, principal, authProperties);

            var claimsData = JsonConvert.SerializeObject(claims);

            // Store serialized claims in the custom cookie
            // _httpContextAccessor.HttpContext.Response.Cookies.Append("CustomKey", claimsData);

            _httpContextAccessor.HttpContext.Response.Redirect("/web2");

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

}

